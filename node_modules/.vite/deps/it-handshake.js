import {
  reader
} from "./chunk-NPRPTSOD.js";
import {
  pushable
} from "./chunk-GCFO4FX4.js";
import {
  pDefer
} from "./chunk-YUNCDTIA.js";
import "./chunk-ADNOUI46.js";
import "./chunk-SD7KC3ZF.js";
import "./chunk-QA7JUXLP.js";
import "./chunk-GSGWBNT6.js";
import "./chunk-CWJX2WJ3.js";

// ../../node_modules/it-handshake/dist/src/index.js
function handshake(stream) {
  const writer = pushable();
  const source = reader(stream.source);
  const sourcePromise = pDefer();
  let sinkErr;
  const sinkPromise = stream.sink(async function* () {
    yield* writer;
    const source2 = await sourcePromise.promise;
    yield* source2;
  }());
  sinkPromise.catch((err) => {
    sinkErr = err;
  });
  const rest = {
    sink: async (source2) => {
      if (sinkErr != null) {
        await Promise.reject(sinkErr);
        return;
      }
      sourcePromise.resolve(source2);
      await sinkPromise;
    },
    source
  };
  return {
    reader: source,
    writer,
    stream: rest,
    rest: () => writer.end(),
    write: writer.push,
    read: async () => {
      const res = await source.next();
      if (res.value != null) {
        return res.value;
      }
    }
  };
}
export {
  handshake
};
//# sourceMappingURL=it-handshake.js.map
