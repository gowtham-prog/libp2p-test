{
  "version": 3,
  "sources": ["../../../../../node_modules/node-forge/lib/des.js", "../../../../../node_modules/node-forge/lib/pem.js", "../../../../../node_modules/node-forge/lib/rc2.js", "../../../../../node_modules/node-forge/lib/pbe.js"],
  "sourcesContent": ["/**\n * DES (Data Encryption Standard) implementation.\n *\n * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.\n * It is based on the BSD-licensed implementation by Paul Tero:\n *\n * Paul Tero, July 2001\n * http://www.tero.co.uk/des/\n *\n * Optimised for performance with large blocks by\n * Michael Hayworth, November 2001\n * http://www.netdealing.com\n *\n * THIS SOFTWARE IS PROVIDED \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n *\n * @author Stefan Siegl\n * @author Dave Longley\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n * Copyright (c) 2012-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./cipher');\nrequire('./cipherModes');\nrequire('./util');\n\n/* DES API */\nmodule.exports = forge.des = forge.des || {};\n\n/**\n * Deprecated. Instead, use:\n *\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\n * cipher.start({iv: iv});\n *\n * Creates an DES cipher object to encrypt data using the given symmetric key.\n * The output will be stored in the 'output' member of the returned cipher.\n *\n * The key and iv may be given as binary-encoded strings of bytes or\n * byte buffers.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n * @param mode the cipher mode to use (default: 'CBC' if IV is\n *          given, 'ECB' if null).\n *\n * @return the cipher.\n */\nforge.des.startEncrypting = function(key, iv, output, mode) {\n  var cipher = _createCipher({\n    key: key,\n    output: output,\n    decrypt: false,\n    mode: mode || (iv === null ? 'ECB' : 'CBC')\n  });\n  cipher.start(iv);\n  return cipher;\n};\n\n/**\n * Deprecated. Instead, use:\n *\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\n *\n * Creates an DES cipher object to encrypt data using the given symmetric key.\n *\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */\nforge.des.createEncryptionCipher = function(key, mode) {\n  return _createCipher({\n    key: key,\n    output: null,\n    decrypt: false,\n    mode: mode\n  });\n};\n\n/**\n * Deprecated. Instead, use:\n *\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\n * decipher.start({iv: iv});\n *\n * Creates an DES cipher object to decrypt data using the given symmetric key.\n * The output will be stored in the 'output' member of the returned cipher.\n *\n * The key and iv may be given as binary-encoded strings of bytes or\n * byte buffers.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n * @param mode the cipher mode to use (default: 'CBC' if IV is\n *          given, 'ECB' if null).\n *\n * @return the cipher.\n */\nforge.des.startDecrypting = function(key, iv, output, mode) {\n  var cipher = _createCipher({\n    key: key,\n    output: output,\n    decrypt: true,\n    mode: mode || (iv === null ? 'ECB' : 'CBC')\n  });\n  cipher.start(iv);\n  return cipher;\n};\n\n/**\n * Deprecated. Instead, use:\n *\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\n *\n * Creates an DES cipher object to decrypt data using the given symmetric key.\n *\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */\nforge.des.createDecryptionCipher = function(key, mode) {\n  return _createCipher({\n    key: key,\n    output: null,\n    decrypt: true,\n    mode: mode\n  });\n};\n\n/**\n * Creates a new DES cipher algorithm object.\n *\n * @param name the name of the algorithm.\n * @param mode the mode factory function.\n *\n * @return the DES algorithm object.\n */\nforge.des.Algorithm = function(name, mode) {\n  var self = this;\n  self.name = name;\n  self.mode = new mode({\n    blockSize: 8,\n    cipher: {\n      encrypt: function(inBlock, outBlock) {\n        return _updateBlock(self._keys, inBlock, outBlock, false);\n      },\n      decrypt: function(inBlock, outBlock) {\n        return _updateBlock(self._keys, inBlock, outBlock, true);\n      }\n    }\n  });\n  self._init = false;\n};\n\n/**\n * Initializes this DES algorithm by expanding its key.\n *\n * @param options the options to use.\n *          key the key to use with this algorithm.\n *          decrypt true if the algorithm should be initialized for decryption,\n *            false for encryption.\n */\nforge.des.Algorithm.prototype.initialize = function(options) {\n  if(this._init) {\n    return;\n  }\n\n  var key = forge.util.createBuffer(options.key);\n  if(this.name.indexOf('3DES') === 0) {\n    if(key.length() !== 24) {\n      throw new Error('Invalid Triple-DES key size: ' + key.length() * 8);\n    }\n  }\n\n  // do key expansion to 16 or 48 subkeys (single or triple DES)\n  this._keys = _createKeys(key);\n  this._init = true;\n};\n\n/** Register DES algorithms **/\n\nregisterAlgorithm('DES-ECB', forge.cipher.modes.ecb);\nregisterAlgorithm('DES-CBC', forge.cipher.modes.cbc);\nregisterAlgorithm('DES-CFB', forge.cipher.modes.cfb);\nregisterAlgorithm('DES-OFB', forge.cipher.modes.ofb);\nregisterAlgorithm('DES-CTR', forge.cipher.modes.ctr);\n\nregisterAlgorithm('3DES-ECB', forge.cipher.modes.ecb);\nregisterAlgorithm('3DES-CBC', forge.cipher.modes.cbc);\nregisterAlgorithm('3DES-CFB', forge.cipher.modes.cfb);\nregisterAlgorithm('3DES-OFB', forge.cipher.modes.ofb);\nregisterAlgorithm('3DES-CTR', forge.cipher.modes.ctr);\n\nfunction registerAlgorithm(name, mode) {\n  var factory = function() {\n    return new forge.des.Algorithm(name, mode);\n  };\n  forge.cipher.registerAlgorithm(name, factory);\n}\n\n/** DES implementation **/\n\nvar spfunction1 = [0x1010400,0,0x10000,0x1010404,0x1010004,0x10404,0x4,0x10000,0x400,0x1010400,0x1010404,0x400,0x1000404,0x1010004,0x1000000,0x4,0x404,0x1000400,0x1000400,0x10400,0x10400,0x1010000,0x1010000,0x1000404,0x10004,0x1000004,0x1000004,0x10004,0,0x404,0x10404,0x1000000,0x10000,0x1010404,0x4,0x1010000,0x1010400,0x1000000,0x1000000,0x400,0x1010004,0x10000,0x10400,0x1000004,0x400,0x4,0x1000404,0x10404,0x1010404,0x10004,0x1010000,0x1000404,0x1000004,0x404,0x10404,0x1010400,0x404,0x1000400,0x1000400,0,0x10004,0x10400,0,0x1010004];\nvar spfunction2 = [-0x7fef7fe0,-0x7fff8000,0x8000,0x108020,0x100000,0x20,-0x7fefffe0,-0x7fff7fe0,-0x7fffffe0,-0x7fef7fe0,-0x7fef8000,-0x80000000,-0x7fff8000,0x100000,0x20,-0x7fefffe0,0x108000,0x100020,-0x7fff7fe0,0,-0x80000000,0x8000,0x108020,-0x7ff00000,0x100020,-0x7fffffe0,0,0x108000,0x8020,-0x7fef8000,-0x7ff00000,0x8020,0,0x108020,-0x7fefffe0,0x100000,-0x7fff7fe0,-0x7ff00000,-0x7fef8000,0x8000,-0x7ff00000,-0x7fff8000,0x20,-0x7fef7fe0,0x108020,0x20,0x8000,-0x80000000,0x8020,-0x7fef8000,0x100000,-0x7fffffe0,0x100020,-0x7fff7fe0,-0x7fffffe0,0x100020,0x108000,0,-0x7fff8000,0x8020,-0x80000000,-0x7fefffe0,-0x7fef7fe0,0x108000];\nvar spfunction3 = [0x208,0x8020200,0,0x8020008,0x8000200,0,0x20208,0x8000200,0x20008,0x8000008,0x8000008,0x20000,0x8020208,0x20008,0x8020000,0x208,0x8000000,0x8,0x8020200,0x200,0x20200,0x8020000,0x8020008,0x20208,0x8000208,0x20200,0x20000,0x8000208,0x8,0x8020208,0x200,0x8000000,0x8020200,0x8000000,0x20008,0x208,0x20000,0x8020200,0x8000200,0,0x200,0x20008,0x8020208,0x8000200,0x8000008,0x200,0,0x8020008,0x8000208,0x20000,0x8000000,0x8020208,0x8,0x20208,0x20200,0x8000008,0x8020000,0x8000208,0x208,0x8020000,0x20208,0x8,0x8020008,0x20200];\nvar spfunction4 = [0x802001,0x2081,0x2081,0x80,0x802080,0x800081,0x800001,0x2001,0,0x802000,0x802000,0x802081,0x81,0,0x800080,0x800001,0x1,0x2000,0x800000,0x802001,0x80,0x800000,0x2001,0x2080,0x800081,0x1,0x2080,0x800080,0x2000,0x802080,0x802081,0x81,0x800080,0x800001,0x802000,0x802081,0x81,0,0,0x802000,0x2080,0x800080,0x800081,0x1,0x802001,0x2081,0x2081,0x80,0x802081,0x81,0x1,0x2000,0x800001,0x2001,0x802080,0x800081,0x2001,0x2080,0x800000,0x802001,0x80,0x800000,0x2000,0x802080];\nvar spfunction5 = [0x100,0x2080100,0x2080000,0x42000100,0x80000,0x100,0x40000000,0x2080000,0x40080100,0x80000,0x2000100,0x40080100,0x42000100,0x42080000,0x80100,0x40000000,0x2000000,0x40080000,0x40080000,0,0x40000100,0x42080100,0x42080100,0x2000100,0x42080000,0x40000100,0,0x42000000,0x2080100,0x2000000,0x42000000,0x80100,0x80000,0x42000100,0x100,0x2000000,0x40000000,0x2080000,0x42000100,0x40080100,0x2000100,0x40000000,0x42080000,0x2080100,0x40080100,0x100,0x2000000,0x42080000,0x42080100,0x80100,0x42000000,0x42080100,0x2080000,0,0x40080000,0x42000000,0x80100,0x2000100,0x40000100,0x80000,0,0x40080000,0x2080100,0x40000100];\nvar spfunction6 = [0x20000010,0x20400000,0x4000,0x20404010,0x20400000,0x10,0x20404010,0x400000,0x20004000,0x404010,0x400000,0x20000010,0x400010,0x20004000,0x20000000,0x4010,0,0x400010,0x20004010,0x4000,0x404000,0x20004010,0x10,0x20400010,0x20400010,0,0x404010,0x20404000,0x4010,0x404000,0x20404000,0x20000000,0x20004000,0x10,0x20400010,0x404000,0x20404010,0x400000,0x4010,0x20000010,0x400000,0x20004000,0x20000000,0x4010,0x20000010,0x20404010,0x404000,0x20400000,0x404010,0x20404000,0,0x20400010,0x10,0x4000,0x20400000,0x404010,0x4000,0x400010,0x20004010,0,0x20404000,0x20000000,0x400010,0x20004010];\nvar spfunction7 = [0x200000,0x4200002,0x4000802,0,0x800,0x4000802,0x200802,0x4200800,0x4200802,0x200000,0,0x4000002,0x2,0x4000000,0x4200002,0x802,0x4000800,0x200802,0x200002,0x4000800,0x4000002,0x4200000,0x4200800,0x200002,0x4200000,0x800,0x802,0x4200802,0x200800,0x2,0x4000000,0x200800,0x4000000,0x200800,0x200000,0x4000802,0x4000802,0x4200002,0x4200002,0x2,0x200002,0x4000000,0x4000800,0x200000,0x4200800,0x802,0x200802,0x4200800,0x802,0x4000002,0x4200802,0x4200000,0x200800,0,0x2,0x4200802,0,0x200802,0x4200000,0x800,0x4000002,0x4000800,0x800,0x200002];\nvar spfunction8 = [0x10001040,0x1000,0x40000,0x10041040,0x10000000,0x10001040,0x40,0x10000000,0x40040,0x10040000,0x10041040,0x41000,0x10041000,0x41040,0x1000,0x40,0x10040000,0x10000040,0x10001000,0x1040,0x41000,0x40040,0x10040040,0x10041000,0x1040,0,0,0x10040040,0x10000040,0x10001000,0x41040,0x40000,0x41040,0x40000,0x10041000,0x1000,0x40,0x10040040,0x1000,0x41040,0x10001000,0x40,0x10000040,0x10040000,0x10040040,0x10000000,0x40000,0x10001040,0,0x10041040,0x40040,0x10000040,0x10040000,0x10001000,0x10001040,0,0x10041040,0x41000,0x41000,0x1040,0x1040,0x40040,0x10000000,0x10041000];\n\n/**\n * Create necessary sub keys.\n *\n * @param key the 64-bit or 192-bit key.\n *\n * @return the expanded keys.\n */\nfunction _createKeys(key) {\n  var pc2bytes0  = [0,0x4,0x20000000,0x20000004,0x10000,0x10004,0x20010000,0x20010004,0x200,0x204,0x20000200,0x20000204,0x10200,0x10204,0x20010200,0x20010204],\n      pc2bytes1  = [0,0x1,0x100000,0x100001,0x4000000,0x4000001,0x4100000,0x4100001,0x100,0x101,0x100100,0x100101,0x4000100,0x4000101,0x4100100,0x4100101],\n      pc2bytes2  = [0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808,0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808],\n      pc2bytes3  = [0,0x200000,0x8000000,0x8200000,0x2000,0x202000,0x8002000,0x8202000,0x20000,0x220000,0x8020000,0x8220000,0x22000,0x222000,0x8022000,0x8222000],\n      pc2bytes4  = [0,0x40000,0x10,0x40010,0,0x40000,0x10,0x40010,0x1000,0x41000,0x1010,0x41010,0x1000,0x41000,0x1010,0x41010],\n      pc2bytes5  = [0,0x400,0x20,0x420,0,0x400,0x20,0x420,0x2000000,0x2000400,0x2000020,0x2000420,0x2000000,0x2000400,0x2000020,0x2000420],\n      pc2bytes6  = [0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002,0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002],\n      pc2bytes7  = [0,0x10000,0x800,0x10800,0x20000000,0x20010000,0x20000800,0x20010800,0x20000,0x30000,0x20800,0x30800,0x20020000,0x20030000,0x20020800,0x20030800],\n      pc2bytes8  = [0,0x40000,0,0x40000,0x2,0x40002,0x2,0x40002,0x2000000,0x2040000,0x2000000,0x2040000,0x2000002,0x2040002,0x2000002,0x2040002],\n      pc2bytes9  = [0,0x10000000,0x8,0x10000008,0,0x10000000,0x8,0x10000008,0x400,0x10000400,0x408,0x10000408,0x400,0x10000400,0x408,0x10000408],\n      pc2bytes10 = [0,0x20,0,0x20,0x100000,0x100020,0x100000,0x100020,0x2000,0x2020,0x2000,0x2020,0x102000,0x102020,0x102000,0x102020],\n      pc2bytes11 = [0,0x1000000,0x200,0x1000200,0x200000,0x1200000,0x200200,0x1200200,0x4000000,0x5000000,0x4000200,0x5000200,0x4200000,0x5200000,0x4200200,0x5200200],\n      pc2bytes12 = [0,0x1000,0x8000000,0x8001000,0x80000,0x81000,0x8080000,0x8081000,0x10,0x1010,0x8000010,0x8001010,0x80010,0x81010,0x8080010,0x8081010],\n      pc2bytes13 = [0,0x4,0x100,0x104,0,0x4,0x100,0x104,0x1,0x5,0x101,0x105,0x1,0x5,0x101,0x105];\n\n  // how many iterations (1 for des, 3 for triple des)\n  // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys\n  var iterations = key.length() > 8 ? 3 : 1;\n\n  // stores the return keys\n  var keys = [];\n\n  // now define the left shifts which need to be done\n  var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];\n\n  var n = 0, tmp;\n  for(var j = 0; j < iterations; j++) {\n    var left = key.getInt32();\n    var right = key.getInt32();\n\n    tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n    right ^= tmp;\n    left ^= (tmp << 4);\n\n    tmp = ((right >>> -16) ^ left) & 0x0000ffff;\n    left ^= tmp;\n    right ^= (tmp << -16);\n\n    tmp = ((left >>> 2) ^ right) & 0x33333333;\n    right ^= tmp;\n    left ^= (tmp << 2);\n\n    tmp = ((right >>> -16) ^ left) & 0x0000ffff;\n    left ^= tmp;\n    right ^= (tmp << -16);\n\n    tmp = ((left >>> 1) ^ right) & 0x55555555;\n    right ^= tmp;\n    left ^= (tmp << 1);\n\n    tmp = ((right >>> 8) ^ left) & 0x00ff00ff;\n    left ^= tmp;\n    right ^= (tmp << 8);\n\n    tmp = ((left >>> 1) ^ right) & 0x55555555;\n    right ^= tmp;\n    left ^= (tmp << 1);\n\n    // right needs to be shifted and OR'd with last four bits of left\n    tmp = (left << 8) | ((right >>> 20) & 0x000000f0);\n\n    // left needs to be put upside down\n    left = ((right << 24) | ((right << 8) & 0xff0000) |\n      ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0));\n    right = tmp;\n\n    // now go through and perform these shifts on the left and right keys\n    for(var i = 0; i < shifts.length; ++i) {\n      //shift the keys either one or two bits to the left\n      if(shifts[i]) {\n        left = (left << 2) | (left >>> 26);\n        right = (right << 2) | (right >>> 26);\n      } else {\n        left = (left << 1) | (left >>> 27);\n        right = (right << 1) | (right >>> 27);\n      }\n      left &= -0xf;\n      right &= -0xf;\n\n      // now apply PC-2, in such a way that E is easier when encrypting or\n      // decrypting this conversion will look like PC-2 except only the last 6\n      // bits of each byte are used rather than 48 consecutive bits and the\n      // order of lines will be according to how the S selection functions will\n      // be applied: S2, S4, S6, S8, S1, S3, S5, S7\n      var lefttmp = (\n        pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf] |\n        pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf] |\n        pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf] |\n        pc2bytes6[(left >>> 4) & 0xf]);\n      var righttmp = (\n        pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf] |\n        pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf] |\n        pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf] |\n        pc2bytes13[(right >>> 4) & 0xf]);\n      tmp = ((righttmp >>> 16) ^ lefttmp) & 0x0000ffff;\n      keys[n++] = lefttmp ^ tmp;\n      keys[n++] = righttmp ^ (tmp << 16);\n    }\n  }\n\n  return keys;\n}\n\n/**\n * Updates a single block (1 byte) using DES. The update will either\n * encrypt or decrypt the block.\n *\n * @param keys the expanded keys.\n * @param input the input block (an array of 32-bit words).\n * @param output the updated output block.\n * @param decrypt true to decrypt the block, false to encrypt it.\n */\nfunction _updateBlock(keys, input, output, decrypt) {\n  // set up loops for single or triple DES\n  var iterations = keys.length === 32 ? 3 : 9;\n  var looping;\n  if(iterations === 3) {\n    looping = decrypt ? [30, -2, -2] : [0, 32, 2];\n  } else {\n    looping = (decrypt ?\n      [94, 62, -2, 32, 64, 2, 30, -2, -2] :\n      [0, 32, 2, 62, 30, -2, 64, 96, 2]);\n  }\n\n  var tmp;\n\n  var left = input[0];\n  var right = input[1];\n\n  // first each 64 bit chunk of the message must be permuted according to IP\n  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n  right ^= tmp;\n  left ^= (tmp << 4);\n\n  tmp = ((left >>> 16) ^ right) & 0x0000ffff;\n  right ^= tmp;\n  left ^= (tmp << 16);\n\n  tmp = ((right >>> 2) ^ left) & 0x33333333;\n  left ^= tmp;\n  right ^= (tmp << 2);\n\n  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;\n  left ^= tmp;\n  right ^= (tmp << 8);\n\n  tmp = ((left >>> 1) ^ right) & 0x55555555;\n  right ^= tmp;\n  left ^= (tmp << 1);\n\n  // rotate left 1 bit\n  left = ((left << 1) | (left >>> 31));\n  right = ((right << 1) | (right >>> 31));\n\n  for(var j = 0; j < iterations; j += 3) {\n    var endloop = looping[j + 1];\n    var loopinc = looping[j + 2];\n\n    // now go through and perform the encryption or decryption\n    for(var i = looping[j]; i != endloop; i += loopinc) {\n      var right1 = right ^ keys[i];\n      var right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];\n\n      // passing these bytes through the S selection functions\n      tmp = left;\n      left = right;\n      right = tmp ^ (\n        spfunction2[(right1 >>> 24) & 0x3f] |\n        spfunction4[(right1 >>> 16) & 0x3f] |\n        spfunction6[(right1 >>>  8) & 0x3f] |\n        spfunction8[right1 & 0x3f] |\n        spfunction1[(right2 >>> 24) & 0x3f] |\n        spfunction3[(right2 >>> 16) & 0x3f] |\n        spfunction5[(right2 >>>  8) & 0x3f] |\n        spfunction7[right2 & 0x3f]);\n    }\n    // unreverse left and right\n    tmp = left;\n    left = right;\n    right = tmp;\n  }\n\n  // rotate right 1 bit\n  left = ((left >>> 1) | (left << 31));\n  right = ((right >>> 1) | (right << 31));\n\n  // now perform IP-1, which is IP in the opposite direction\n  tmp = ((left >>> 1) ^ right) & 0x55555555;\n  right ^= tmp;\n  left ^= (tmp << 1);\n\n  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;\n  left ^= tmp;\n  right ^= (tmp << 8);\n\n  tmp = ((right >>> 2) ^ left) & 0x33333333;\n  left ^= tmp;\n  right ^= (tmp << 2);\n\n  tmp = ((left >>> 16) ^ right) & 0x0000ffff;\n  right ^= tmp;\n  left ^= (tmp << 16);\n\n  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n  right ^= tmp;\n  left ^= (tmp << 4);\n\n  output[0] = left;\n  output[1] = right;\n}\n\n/**\n * Deprecated. Instead, use:\n *\n * forge.cipher.createCipher('DES-<mode>', key);\n * forge.cipher.createDecipher('DES-<mode>', key);\n *\n * Creates a deprecated DES cipher object. This object's mode will default to\n * CBC (cipher-block-chaining).\n *\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\n *\n * @param options the options to use.\n *          key the symmetric key to use (64 or 192 bits).\n *          output the buffer to write to.\n *          decrypt true for decryption, false for encryption.\n *          mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */\nfunction _createCipher(options) {\n  options = options || {};\n  var mode = (options.mode || 'CBC').toUpperCase();\n  var algorithm = 'DES-' + mode;\n\n  var cipher;\n  if(options.decrypt) {\n    cipher = forge.cipher.createDecipher(algorithm, options.key);\n  } else {\n    cipher = forge.cipher.createCipher(algorithm, options.key);\n  }\n\n  // backwards compatible start API\n  var start = cipher.start;\n  cipher.start = function(iv, options) {\n    // backwards compatibility: support second arg as output buffer\n    var output = null;\n    if(options instanceof forge.util.ByteBuffer) {\n      output = options;\n      options = {};\n    }\n    options = options || {};\n    options.output = output;\n    options.iv = iv;\n    start.call(cipher, options);\n  };\n\n  return cipher;\n}\n", "/**\n * Javascript implementation of basic PEM (Privacy Enhanced Mail) algorithms.\n *\n * See: RFC 1421.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2013-2014 Digital Bazaar, Inc.\n *\n * A Forge PEM object has the following fields:\n *\n * type: identifies the type of message (eg: \"RSA PRIVATE KEY\").\n *\n * procType: identifies the type of processing performed on the message,\n *   it has two subfields: version and type, eg: 4,ENCRYPTED.\n *\n * contentDomain: identifies the type of content in the message, typically\n *   only uses the value: \"RFC822\".\n *\n * dekInfo: identifies the message encryption algorithm and mode and includes\n *   any parameters for the algorithm, it has two subfields: algorithm and\n *   parameters, eg: DES-CBC,F8143EDE5960C597.\n *\n * headers: contains all other PEM encapsulated headers -- where order is\n *   significant (for pairing data like recipient ID + key info).\n *\n * body: the binary-encoded body.\n */\nvar forge = require('./forge');\nrequire('./util');\n\n// shortcut for pem API\nvar pem = module.exports = forge.pem = forge.pem || {};\n\n/**\n * Encodes (serializes) the given PEM object.\n *\n * @param msg the PEM message object to encode.\n * @param options the options to use:\n *          maxline the maximum characters per line for the body, (default: 64).\n *\n * @return the PEM-formatted string.\n */\npem.encode = function(msg, options) {\n  options = options || {};\n  var rval = '-----BEGIN ' + msg.type + '-----\\r\\n';\n\n  // encode special headers\n  var header;\n  if(msg.procType) {\n    header = {\n      name: 'Proc-Type',\n      values: [String(msg.procType.version), msg.procType.type]\n    };\n    rval += foldHeader(header);\n  }\n  if(msg.contentDomain) {\n    header = {name: 'Content-Domain', values: [msg.contentDomain]};\n    rval += foldHeader(header);\n  }\n  if(msg.dekInfo) {\n    header = {name: 'DEK-Info', values: [msg.dekInfo.algorithm]};\n    if(msg.dekInfo.parameters) {\n      header.values.push(msg.dekInfo.parameters);\n    }\n    rval += foldHeader(header);\n  }\n\n  if(msg.headers) {\n    // encode all other headers\n    for(var i = 0; i < msg.headers.length; ++i) {\n      rval += foldHeader(msg.headers[i]);\n    }\n  }\n\n  // terminate header\n  if(msg.procType) {\n    rval += '\\r\\n';\n  }\n\n  // add body\n  rval += forge.util.encode64(msg.body, options.maxline || 64) + '\\r\\n';\n\n  rval += '-----END ' + msg.type + '-----\\r\\n';\n  return rval;\n};\n\n/**\n * Decodes (deserializes) all PEM messages found in the given string.\n *\n * @param str the PEM-formatted string to decode.\n *\n * @return the PEM message objects in an array.\n */\npem.decode = function(str) {\n  var rval = [];\n\n  // split string into PEM messages (be lenient w/EOF on BEGIN line)\n  var rMessage = /\\s*-----BEGIN ([A-Z0-9- ]+)-----\\r?\\n?([\\x21-\\x7e\\s]+?(?:\\r?\\n\\r?\\n))?([:A-Za-z0-9+\\/=\\s]+?)-----END \\1-----/g;\n  var rHeader = /([\\x21-\\x7e]+):\\s*([\\x21-\\x7e\\s^:]+)/;\n  var rCRLF = /\\r?\\n/;\n  var match;\n  while(true) {\n    match = rMessage.exec(str);\n    if(!match) {\n      break;\n    }\n\n    // accept \"NEW CERTIFICATE REQUEST\" as \"CERTIFICATE REQUEST\"\n    // https://datatracker.ietf.org/doc/html/rfc7468#section-7\n    var type = match[1];\n    if(type === 'NEW CERTIFICATE REQUEST') {\n      type = 'CERTIFICATE REQUEST';\n    }\n\n    var msg = {\n      type: type,\n      procType: null,\n      contentDomain: null,\n      dekInfo: null,\n      headers: [],\n      body: forge.util.decode64(match[3])\n    };\n    rval.push(msg);\n\n    // no headers\n    if(!match[2]) {\n      continue;\n    }\n\n    // parse headers\n    var lines = match[2].split(rCRLF);\n    var li = 0;\n    while(match && li < lines.length) {\n      // get line, trim any rhs whitespace\n      var line = lines[li].replace(/\\s+$/, '');\n\n      // RFC2822 unfold any following folded lines\n      for(var nl = li + 1; nl < lines.length; ++nl) {\n        var next = lines[nl];\n        if(!/\\s/.test(next[0])) {\n          break;\n        }\n        line += next;\n        li = nl;\n      }\n\n      // parse header\n      match = line.match(rHeader);\n      if(match) {\n        var header = {name: match[1], values: []};\n        var values = match[2].split(',');\n        for(var vi = 0; vi < values.length; ++vi) {\n          header.values.push(ltrim(values[vi]));\n        }\n\n        // Proc-Type must be the first header\n        if(!msg.procType) {\n          if(header.name !== 'Proc-Type') {\n            throw new Error('Invalid PEM formatted message. The first ' +\n              'encapsulated header must be \"Proc-Type\".');\n          } else if(header.values.length !== 2) {\n            throw new Error('Invalid PEM formatted message. The \"Proc-Type\" ' +\n              'header must have two subfields.');\n          }\n          msg.procType = {version: values[0], type: values[1]};\n        } else if(!msg.contentDomain && header.name === 'Content-Domain') {\n          // special-case Content-Domain\n          msg.contentDomain = values[0] || '';\n        } else if(!msg.dekInfo && header.name === 'DEK-Info') {\n          // special-case DEK-Info\n          if(header.values.length === 0) {\n            throw new Error('Invalid PEM formatted message. The \"DEK-Info\" ' +\n              'header must have at least one subfield.');\n          }\n          msg.dekInfo = {algorithm: values[0], parameters: values[1] || null};\n        } else {\n          msg.headers.push(header);\n        }\n      }\n\n      ++li;\n    }\n\n    if(msg.procType === 'ENCRYPTED' && !msg.dekInfo) {\n      throw new Error('Invalid PEM formatted message. The \"DEK-Info\" ' +\n        'header must be present if \"Proc-Type\" is \"ENCRYPTED\".');\n    }\n  }\n\n  if(rval.length === 0) {\n    throw new Error('Invalid PEM formatted message.');\n  }\n\n  return rval;\n};\n\nfunction foldHeader(header) {\n  var rval = header.name + ': ';\n\n  // ensure values with CRLF are folded\n  var values = [];\n  var insertSpace = function(match, $1) {\n    return ' ' + $1;\n  };\n  for(var i = 0; i < header.values.length; ++i) {\n    values.push(header.values[i].replace(/^(\\S+\\r\\n)/, insertSpace));\n  }\n  rval += values.join(',') + '\\r\\n';\n\n  // do folding\n  var length = 0;\n  var candidate = -1;\n  for(var i = 0; i < rval.length; ++i, ++length) {\n    if(length > 65 && candidate !== -1) {\n      var insert = rval[candidate];\n      if(insert === ',') {\n        ++candidate;\n        rval = rval.substr(0, candidate) + '\\r\\n ' + rval.substr(candidate);\n      } else {\n        rval = rval.substr(0, candidate) +\n          '\\r\\n' + insert + rval.substr(candidate + 1);\n      }\n      length = (i - candidate - 1);\n      candidate = -1;\n      ++i;\n    } else if(rval[i] === ' ' || rval[i] === '\\t' || rval[i] === ',') {\n      candidate = i;\n    }\n  }\n\n  return rval;\n}\n\nfunction ltrim(str) {\n  return str.replace(/^\\s+/, '');\n}\n", "/**\n * RC2 implementation.\n *\n * @author Stefan Siegl\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * Information on the RC2 cipher is available from RFC #2268,\n * http://www.ietf.org/rfc/rfc2268.txt\n */\nvar forge = require('./forge');\nrequire('./util');\n\nvar piTable = [\n  0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d,\n  0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2,\n  0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32,\n  0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82,\n  0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc,\n  0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26,\n  0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03,\n  0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7,\n  0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a,\n  0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec,\n  0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39,\n  0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31,\n  0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9,\n  0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9,\n  0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e,\n  0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad\n];\n\nvar s = [1, 2, 3, 5];\n\n/**\n * Rotate a word left by given number of bits.\n *\n * Bits that are shifted out on the left are put back in on the right\n * hand side.\n *\n * @param word The word to shift left.\n * @param bits The number of bits to shift by.\n * @return The rotated word.\n */\nvar rol = function(word, bits) {\n  return ((word << bits) & 0xffff) | ((word & 0xffff) >> (16 - bits));\n};\n\n/**\n * Rotate a word right by given number of bits.\n *\n * Bits that are shifted out on the right are put back in on the left\n * hand side.\n *\n * @param word The word to shift right.\n * @param bits The number of bits to shift by.\n * @return The rotated word.\n */\nvar ror = function(word, bits) {\n  return ((word & 0xffff) >> bits) | ((word << (16 - bits)) & 0xffff);\n};\n\n/* RC2 API */\nmodule.exports = forge.rc2 = forge.rc2 || {};\n\n/**\n * Perform RC2 key expansion as per RFC #2268, section 2.\n *\n * @param key variable-length user key (between 1 and 128 bytes)\n * @param effKeyBits number of effective key bits (default: 128)\n * @return the expanded RC2 key (ByteBuffer of 128 bytes)\n */\nforge.rc2.expandKey = function(key, effKeyBits) {\n  if(typeof key === 'string') {\n    key = forge.util.createBuffer(key);\n  }\n  effKeyBits = effKeyBits || 128;\n\n  /* introduce variables that match the names used in RFC #2268 */\n  var L = key;\n  var T = key.length();\n  var T1 = effKeyBits;\n  var T8 = Math.ceil(T1 / 8);\n  var TM = 0xff >> (T1 & 0x07);\n  var i;\n\n  for(i = T; i < 128; i++) {\n    L.putByte(piTable[(L.at(i - 1) + L.at(i - T)) & 0xff]);\n  }\n\n  L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);\n\n  for(i = 127 - T8; i >= 0; i--) {\n    L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);\n  }\n\n  return L;\n};\n\n/**\n * Creates a RC2 cipher object.\n *\n * @param key the symmetric key to use (as base for key generation).\n * @param bits the number of effective key bits.\n * @param encrypt false for decryption, true for encryption.\n *\n * @return the cipher.\n */\nvar createCipher = function(key, bits, encrypt) {\n  var _finish = false, _input = null, _output = null, _iv = null;\n  var mixRound, mashRound;\n  var i, j, K = [];\n\n  /* Expand key and fill into K[] Array */\n  key = forge.rc2.expandKey(key, bits);\n  for(i = 0; i < 64; i++) {\n    K.push(key.getInt16Le());\n  }\n\n  if(encrypt) {\n    /**\n     * Perform one mixing round \"in place\".\n     *\n     * @param R Array of four words to perform mixing on.\n     */\n    mixRound = function(R) {\n      for(i = 0; i < 4; i++) {\n        R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +\n          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);\n        R[i] = rol(R[i], s[i]);\n        j++;\n      }\n    };\n\n    /**\n     * Perform one mashing round \"in place\".\n     *\n     * @param R Array of four words to perform mashing on.\n     */\n    mashRound = function(R) {\n      for(i = 0; i < 4; i++) {\n        R[i] += K[R[(i + 3) % 4] & 63];\n      }\n    };\n  } else {\n    /**\n     * Perform one r-mixing round \"in place\".\n     *\n     * @param R Array of four words to perform mixing on.\n     */\n    mixRound = function(R) {\n      for(i = 3; i >= 0; i--) {\n        R[i] = ror(R[i], s[i]);\n        R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +\n          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);\n        j--;\n      }\n    };\n\n    /**\n     * Perform one r-mashing round \"in place\".\n     *\n     * @param R Array of four words to perform mashing on.\n     */\n    mashRound = function(R) {\n      for(i = 3; i >= 0; i--) {\n        R[i] -= K[R[(i + 3) % 4] & 63];\n      }\n    };\n  }\n\n  /**\n   * Run the specified cipher execution plan.\n   *\n   * This function takes four words from the input buffer, applies the IV on\n   * it (if requested) and runs the provided execution plan.\n   *\n   * The plan must be put together in form of a array of arrays.  Where the\n   * outer one is simply a list of steps to perform and the inner one needs\n   * to have two elements: the first one telling how many rounds to perform,\n   * the second one telling what to do (i.e. the function to call).\n   *\n   * @param {Array} plan The plan to execute.\n   */\n  var runPlan = function(plan) {\n    var R = [];\n\n    /* Get data from input buffer and fill the four words into R */\n    for(i = 0; i < 4; i++) {\n      var val = _input.getInt16Le();\n\n      if(_iv !== null) {\n        if(encrypt) {\n          /* We're encrypting, apply the IV first. */\n          val ^= _iv.getInt16Le();\n        } else {\n          /* We're decryption, keep cipher text for next block. */\n          _iv.putInt16Le(val);\n        }\n      }\n\n      R.push(val & 0xffff);\n    }\n\n    /* Reset global \"j\" variable as per spec. */\n    j = encrypt ? 0 : 63;\n\n    /* Run execution plan. */\n    for(var ptr = 0; ptr < plan.length; ptr++) {\n      for(var ctr = 0; ctr < plan[ptr][0]; ctr++) {\n        plan[ptr][1](R);\n      }\n    }\n\n    /* Write back result to output buffer. */\n    for(i = 0; i < 4; i++) {\n      if(_iv !== null) {\n        if(encrypt) {\n          /* We're encrypting in CBC-mode, feed back encrypted bytes into\n             IV buffer to carry it forward to next block. */\n          _iv.putInt16Le(R[i]);\n        } else {\n          R[i] ^= _iv.getInt16Le();\n        }\n      }\n\n      _output.putInt16Le(R[i]);\n    }\n  };\n\n  /* Create cipher object */\n  var cipher = null;\n  cipher = {\n    /**\n     * Starts or restarts the encryption or decryption process, whichever\n     * was previously configured.\n     *\n     * To use the cipher in CBC mode, iv may be given either as a string\n     * of bytes, or as a byte buffer.  For ECB mode, give null as iv.\n     *\n     * @param iv the initialization vector to use, null for ECB mode.\n     * @param output the output the buffer to write to, null to create one.\n     */\n    start: function(iv, output) {\n      if(iv) {\n        /* CBC mode */\n        if(typeof iv === 'string') {\n          iv = forge.util.createBuffer(iv);\n        }\n      }\n\n      _finish = false;\n      _input = forge.util.createBuffer();\n      _output = output || new forge.util.createBuffer();\n      _iv = iv;\n\n      cipher.output = _output;\n    },\n\n    /**\n     * Updates the next block.\n     *\n     * @param input the buffer to read from.\n     */\n    update: function(input) {\n      if(!_finish) {\n        // not finishing, so fill the input buffer with more input\n        _input.putBuffer(input);\n      }\n\n      while(_input.length() >= 8) {\n        runPlan([\n            [ 5, mixRound ],\n            [ 1, mashRound ],\n            [ 6, mixRound ],\n            [ 1, mashRound ],\n            [ 5, mixRound ]\n          ]);\n      }\n    },\n\n    /**\n     * Finishes encrypting or decrypting.\n     *\n     * @param pad a padding function to use, null for PKCS#7 padding,\n     *           signature(blockSize, buffer, decrypt).\n     *\n     * @return true if successful, false on error.\n     */\n    finish: function(pad) {\n      var rval = true;\n\n      if(encrypt) {\n        if(pad) {\n          rval = pad(8, _input, !encrypt);\n        } else {\n          // add PKCS#7 padding to block (each pad byte is the\n          // value of the number of pad bytes)\n          var padding = (_input.length() === 8) ? 8 : (8 - _input.length());\n          _input.fillWithByte(padding, padding);\n        }\n      }\n\n      if(rval) {\n        // do final update\n        _finish = true;\n        cipher.update();\n      }\n\n      if(!encrypt) {\n        // check for error: input data not a multiple of block size\n        rval = (_input.length() === 0);\n        if(rval) {\n          if(pad) {\n            rval = pad(8, _output, !encrypt);\n          } else {\n            // ensure padding byte count is valid\n            var len = _output.length();\n            var count = _output.at(len - 1);\n\n            if(count > len) {\n              rval = false;\n            } else {\n              // trim off padding bytes\n              _output.truncate(count);\n            }\n          }\n        }\n      }\n\n      return rval;\n    }\n  };\n\n  return cipher;\n};\n\n/**\n * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the\n * given symmetric key. The output will be stored in the 'output' member\n * of the returned cipher.\n *\n * The key and iv may be given as a string of bytes or a byte buffer.\n * The cipher is initialized to use 128 effective key bits.\n *\n * @param key the symmetric key to use.\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n *\n * @return the cipher.\n */\nforge.rc2.startEncrypting = function(key, iv, output) {\n  var cipher = forge.rc2.createEncryptionCipher(key, 128);\n  cipher.start(iv, output);\n  return cipher;\n};\n\n/**\n * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the\n * given symmetric key.\n *\n * The key may be given as a string of bytes or a byte buffer.\n *\n * To start encrypting call start() on the cipher with an iv and optional\n * output buffer.\n *\n * @param key the symmetric key to use.\n *\n * @return the cipher.\n */\nforge.rc2.createEncryptionCipher = function(key, bits) {\n  return createCipher(key, bits, true);\n};\n\n/**\n * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the\n * given symmetric key. The output will be stored in the 'output' member\n * of the returned cipher.\n *\n * The key and iv may be given as a string of bytes or a byte buffer.\n * The cipher is initialized to use 128 effective key bits.\n *\n * @param key the symmetric key to use.\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n *\n * @return the cipher.\n */\nforge.rc2.startDecrypting = function(key, iv, output) {\n  var cipher = forge.rc2.createDecryptionCipher(key, 128);\n  cipher.start(iv, output);\n  return cipher;\n};\n\n/**\n * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the\n * given symmetric key.\n *\n * The key may be given as a string of bytes or a byte buffer.\n *\n * To start decrypting call start() on the cipher with an iv and optional\n * output buffer.\n *\n * @param key the symmetric key to use.\n *\n * @return the cipher.\n */\nforge.rc2.createDecryptionCipher = function(key, bits) {\n  return createCipher(key, bits, false);\n};\n", "/**\n * Password-based encryption functions.\n *\n * @author Dave Longley\n * @author Stefan Siegl <stesie@brokenpipe.de>\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * An EncryptedPrivateKeyInfo:\n *\n * EncryptedPrivateKeyInfo ::= SEQUENCE {\n *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,\n *   encryptedData        EncryptedData }\n *\n * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n *\n * EncryptedData ::= OCTET STRING\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./asn1');\nrequire('./des');\nrequire('./md');\nrequire('./oids');\nrequire('./pbkdf2');\nrequire('./pem');\nrequire('./random');\nrequire('./rc2');\nrequire('./rsa');\nrequire('./util');\n\nif(typeof BigInteger === 'undefined') {\n  var BigInteger = forge.jsbn.BigInteger;\n}\n\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n\n/* Password-based encryption implementation. */\nvar pki = forge.pki = forge.pki || {};\nmodule.exports = pki.pbe = forge.pbe = forge.pbe || {};\nvar oids = pki.oids;\n\n// validator for an EncryptedPrivateKeyInfo structure\n// Note: Currently only works w/algorithm params\nvar encryptedPrivateKeyValidator = {\n  name: 'EncryptedPrivateKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encryptionOid'\n    }, {\n      name: 'AlgorithmIdentifier.parameters',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'encryptionParams'\n    }]\n  }, {\n    // encryptedData\n    name: 'EncryptedPrivateKeyInfo.encryptedData',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'encryptedData'\n  }]\n};\n\n// validator for a PBES2Algorithms structure\n// Note: Currently only works w/PBKDF2 + AES encryption schemes\nvar PBES2AlgorithmsValidator = {\n  name: 'PBES2Algorithms',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'PBES2Algorithms.keyDerivationFunc',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'PBES2Algorithms.keyDerivationFunc.oid',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'kdfOid'\n    }, {\n      name: 'PBES2Algorithms.params',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: 'PBES2Algorithms.params.salt',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: 'kdfSalt'\n      }, {\n        name: 'PBES2Algorithms.params.iterationCount',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: 'kdfIterationCount'\n      }, {\n        name: 'PBES2Algorithms.params.keyLength',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        optional: true,\n        capture: 'keyLength'\n      }, {\n        // prf\n        name: 'PBES2Algorithms.params.prf',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        optional: true,\n        value: [{\n          name: 'PBES2Algorithms.params.prf.algorithm',\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: 'prfOid'\n        }]\n      }]\n    }]\n  }, {\n    name: 'PBES2Algorithms.encryptionScheme',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'PBES2Algorithms.encryptionScheme.oid',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encOid'\n    }, {\n      name: 'PBES2Algorithms.encryptionScheme.iv',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OCTETSTRING,\n      constructed: false,\n      capture: 'encIv'\n    }]\n  }]\n};\n\nvar pkcs12PbeParamsValidator = {\n  name: 'pkcs-12PbeParams',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'pkcs-12PbeParams.salt',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'salt'\n  }, {\n    name: 'pkcs-12PbeParams.iterations',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'iterations'\n  }]\n};\n\n/**\n * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.\n *\n * PBES2Algorithms ALGORITHM-IDENTIFIER ::=\n *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}\n *\n * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}\n *\n * PBES2-params ::= SEQUENCE {\n *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\n *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}\n * }\n *\n * PBES2-KDFs ALGORITHM-IDENTIFIER ::=\n *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }\n *\n * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }\n *\n * PBKDF2-params ::= SEQUENCE {\n *   salt CHOICE {\n *     specified OCTET STRING,\n *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}\n *   },\n *   iterationCount INTEGER (1..MAX),\n *   keyLength INTEGER (1..MAX) OPTIONAL,\n *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1\n * }\n *\n * @param obj the ASN.1 PrivateKeyInfo object.\n * @param password the password to encrypt with.\n * @param options:\n *          algorithm the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.\n *          count the iteration count to use.\n *          saltSize the salt size to use.\n *          prfAlgorithm the PRF message digest algorithm to use\n *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')\n *\n * @return the ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptPrivateKeyInfo = function(obj, password, options) {\n  // set default options\n  options = options || {};\n  options.saltSize = options.saltSize || 8;\n  options.count = options.count || 2048;\n  options.algorithm = options.algorithm || 'aes128';\n  options.prfAlgorithm = options.prfAlgorithm || 'sha1';\n\n  // generate PBE params\n  var salt = forge.random.getBytesSync(options.saltSize);\n  var count = options.count;\n  var countBytes = asn1.integerToDer(count);\n  var dkLen;\n  var encryptionAlgorithm;\n  var encryptedData;\n  if(options.algorithm.indexOf('aes') === 0 || options.algorithm === 'des') {\n    // do PBES2\n    var ivLen, encOid, cipherFn;\n    switch(options.algorithm) {\n    case 'aes128':\n      dkLen = 16;\n      ivLen = 16;\n      encOid = oids['aes128-CBC'];\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'aes192':\n      dkLen = 24;\n      ivLen = 16;\n      encOid = oids['aes192-CBC'];\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'aes256':\n      dkLen = 32;\n      ivLen = 16;\n      encOid = oids['aes256-CBC'];\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'des':\n      dkLen = 8;\n      ivLen = 8;\n      encOid = oids['desCBC'];\n      cipherFn = forge.des.createEncryptionCipher;\n      break;\n    default:\n      var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\n      error.algorithm = options.algorithm;\n      throw error;\n    }\n\n    // get PRF message digest\n    var prfAlgorithm = 'hmacWith' + options.prfAlgorithm.toUpperCase();\n    var md = prfAlgorithmToMessageDigest(prfAlgorithm);\n\n    // encrypt private key using pbe SHA-1 and AES/DES\n    var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n    var iv = forge.random.getBytesSync(ivLen);\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    cipher.update(asn1.toDer(obj));\n    cipher.finish();\n    encryptedData = cipher.output.getBytes();\n\n    // get PBKDF2-params\n    var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);\n\n    encryptionAlgorithm = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(oids['pkcs5PBES2']).getBytes()),\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // keyDerivationFunc\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n            asn1.oidToDer(oids['pkcs5PBKDF2']).getBytes()),\n          // PBKDF2-params\n          params\n        ]),\n        // encryptionScheme\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n            asn1.oidToDer(encOid).getBytes()),\n          // iv\n          asn1.create(\n            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)\n        ])\n      ])\n    ]);\n  } else if(options.algorithm === '3des') {\n    // Do PKCS12 PBE\n    dkLen = 24;\n\n    var saltBytes = new forge.util.ByteBuffer(salt);\n    var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);\n    var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);\n    var cipher = forge.des.createEncryptionCipher(dk);\n    cipher.start(iv);\n    cipher.update(asn1.toDer(obj));\n    cipher.finish();\n    encryptedData = cipher.output.getBytes();\n\n    encryptionAlgorithm = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(oids['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()),\n      // pkcs-12PbeParams\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // salt\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\n        // iteration count\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n          countBytes.getBytes())\n      ])\n    ]);\n  } else {\n    var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\n    error.algorithm = options.algorithm;\n    throw error;\n  }\n\n  // EncryptedPrivateKeyInfo\n  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // encryptionAlgorithm\n    encryptionAlgorithm,\n    // encryptedData\n    asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)\n  ]);\n  return rval;\n};\n\n/**\n * Decrypts a ASN.1 PrivateKeyInfo object.\n *\n * @param obj the ASN.1 EncryptedPrivateKeyInfo object.\n * @param password the password to decrypt with.\n *\n * @return the ASN.1 PrivateKeyInfo on success, null on failure.\n */\npki.decryptPrivateKeyInfo = function(obj, password) {\n  var rval = null;\n\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {\n    var error = new Error('Cannot read encrypted private key. ' +\n      'ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // get cipher\n  var oid = asn1.derToOid(capture.encryptionOid);\n  var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password);\n\n  // get encrypted data\n  var encrypted = forge.util.createBuffer(capture.encryptedData);\n\n  cipher.update(encrypted);\n  if(cipher.finish()) {\n    rval = asn1.fromDer(cipher.output);\n  }\n\n  return rval;\n};\n\n/**\n * Converts a EncryptedPrivateKeyInfo to PEM format.\n *\n * @param epki the EncryptedPrivateKeyInfo.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted encrypted private key.\n */\npki.encryptedPrivateKeyToPem = function(epki, maxline) {\n  // convert to DER, then PEM-encode\n  var msg = {\n    type: 'ENCRYPTED PRIVATE KEY',\n    body: asn1.toDer(epki).getBytes()\n  };\n  return forge.pem.encode(msg, {maxline: maxline});\n};\n\n/**\n * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption\n * is not performed.\n *\n * @param pem the EncryptedPrivateKeyInfo in PEM-format.\n *\n * @return the ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptedPrivateKeyFromPem = function(pem) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'ENCRYPTED PRIVATE KEY') {\n    var error = new Error('Could not convert encrypted private key from PEM; ' +\n      'PEM header type is \"ENCRYPTED PRIVATE KEY\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert encrypted private key from PEM; ' +\n      'PEM is encrypted.');\n  }\n\n  // convert DER to ASN.1 object\n  return asn1.fromDer(msg.body);\n};\n\n/**\n * Encrypts an RSA private key. By default, the key will be wrapped in\n * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.\n * This is the standard, preferred way to encrypt a private key.\n *\n * To produce a non-standard PEM-encrypted private key that uses encapsulated\n * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL\n * private key encryption), set the 'legacy' option to true. Note: Using this\n * option will cause the iteration count to be forced to 1.\n *\n * Note: The 'des' algorithm is supported, but it is not considered to be\n * secure because it only uses a single 56-bit key. If possible, it is highly\n * recommended that a different algorithm be used.\n *\n * @param rsaKey the RSA key to encrypt.\n * @param password the password to use.\n * @param options:\n *          algorithm: the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des', 'des').\n *          count: the iteration count to use.\n *          saltSize: the salt size to use.\n *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated\n *            headers (DEK-Info) private key.\n *\n * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptRsaPrivateKey = function(rsaKey, password, options) {\n  // standard PKCS#8\n  options = options || {};\n  if(!options.legacy) {\n    // encrypt PrivateKeyInfo\n    var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));\n    rval = pki.encryptPrivateKeyInfo(rval, password, options);\n    return pki.encryptedPrivateKeyToPem(rval);\n  }\n\n  // legacy non-PKCS#8\n  var algorithm;\n  var iv;\n  var dkLen;\n  var cipherFn;\n  switch(options.algorithm) {\n  case 'aes128':\n    algorithm = 'AES-128-CBC';\n    dkLen = 16;\n    iv = forge.random.getBytesSync(16);\n    cipherFn = forge.aes.createEncryptionCipher;\n    break;\n  case 'aes192':\n    algorithm = 'AES-192-CBC';\n    dkLen = 24;\n    iv = forge.random.getBytesSync(16);\n    cipherFn = forge.aes.createEncryptionCipher;\n    break;\n  case 'aes256':\n    algorithm = 'AES-256-CBC';\n    dkLen = 32;\n    iv = forge.random.getBytesSync(16);\n    cipherFn = forge.aes.createEncryptionCipher;\n    break;\n  case '3des':\n    algorithm = 'DES-EDE3-CBC';\n    dkLen = 24;\n    iv = forge.random.getBytesSync(8);\n    cipherFn = forge.des.createEncryptionCipher;\n    break;\n  case 'des':\n    algorithm = 'DES-CBC';\n    dkLen = 8;\n    iv = forge.random.getBytesSync(8);\n    cipherFn = forge.des.createEncryptionCipher;\n    break;\n  default:\n    var error = new Error('Could not encrypt RSA private key; unsupported ' +\n      'encryption algorithm \"' + options.algorithm + '\".');\n    error.algorithm = options.algorithm;\n    throw error;\n  }\n\n  // encrypt private key using OpenSSL legacy key derivation\n  var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n  var cipher = cipherFn(dk);\n  cipher.start(iv);\n  cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));\n  cipher.finish();\n\n  var msg = {\n    type: 'RSA PRIVATE KEY',\n    procType: {\n      version: '4',\n      type: 'ENCRYPTED'\n    },\n    dekInfo: {\n      algorithm: algorithm,\n      parameters: forge.util.bytesToHex(iv).toUpperCase()\n    },\n    body: cipher.output.getBytes()\n  };\n  return forge.pem.encode(msg);\n};\n\n/**\n * Decrypts an RSA private key.\n *\n * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.\n * @param password the password to use.\n *\n * @return the RSA key on success, null on failure.\n */\npki.decryptRsaPrivateKey = function(pem, password) {\n  var rval = null;\n\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'ENCRYPTED PRIVATE KEY' &&\n    msg.type !== 'PRIVATE KEY' &&\n    msg.type !== 'RSA PRIVATE KEY') {\n    var error = new Error('Could not convert private key from PEM; PEM header type ' +\n      'is not \"ENCRYPTED PRIVATE KEY\", \"PRIVATE KEY\", or \"RSA PRIVATE KEY\".');\n    error.headerType = error;\n    throw error;\n  }\n\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    var dkLen;\n    var cipherFn;\n    switch(msg.dekInfo.algorithm) {\n    case 'DES-CBC':\n      dkLen = 8;\n      cipherFn = forge.des.createDecryptionCipher;\n      break;\n    case 'DES-EDE3-CBC':\n      dkLen = 24;\n      cipherFn = forge.des.createDecryptionCipher;\n      break;\n    case 'AES-128-CBC':\n      dkLen = 16;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'AES-192-CBC':\n      dkLen = 24;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'AES-256-CBC':\n      dkLen = 32;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'RC2-40-CBC':\n      dkLen = 5;\n      cipherFn = function(key) {\n        return forge.rc2.createDecryptionCipher(key, 40);\n      };\n      break;\n    case 'RC2-64-CBC':\n      dkLen = 8;\n      cipherFn = function(key) {\n        return forge.rc2.createDecryptionCipher(key, 64);\n      };\n      break;\n    case 'RC2-128-CBC':\n      dkLen = 16;\n      cipherFn = function(key) {\n        return forge.rc2.createDecryptionCipher(key, 128);\n      };\n      break;\n    default:\n      var error = new Error('Could not decrypt private key; unsupported ' +\n        'encryption algorithm \"' + msg.dekInfo.algorithm + '\".');\n      error.algorithm = msg.dekInfo.algorithm;\n      throw error;\n    }\n\n    // use OpenSSL legacy key derivation\n    var iv = forge.util.hexToBytes(msg.dekInfo.parameters);\n    var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    cipher.update(forge.util.createBuffer(msg.body));\n    if(cipher.finish()) {\n      rval = cipher.output.getBytes();\n    } else {\n      return rval;\n    }\n  } else {\n    rval = msg.body;\n  }\n\n  if(msg.type === 'ENCRYPTED PRIVATE KEY') {\n    rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);\n  } else {\n    // decryption already performed above\n    rval = asn1.fromDer(rval);\n  }\n\n  if(rval !== null) {\n    rval = pki.privateKeyFromAsn1(rval);\n  }\n\n  return rval;\n};\n\n/**\n * Derives a PKCS#12 key.\n *\n * @param password the password to derive the key material from, null or\n *          undefined for none.\n * @param salt the salt, as a ByteBuffer, to use.\n * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).\n * @param iter the iteration count.\n * @param n the number of bytes to derive from the password.\n * @param md the message digest to use, defaults to SHA-1.\n *\n * @return a ByteBuffer with the bytes derived from the password.\n */\npki.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {\n  var j, l;\n\n  if(typeof md === 'undefined' || md === null) {\n    if(!('sha1' in forge.md)) {\n      throw new Error('\"sha1\" hash algorithm unavailable.');\n    }\n    md = forge.md.sha1.create();\n  }\n\n  var u = md.digestLength;\n  var v = md.blockLength;\n  var result = new forge.util.ByteBuffer();\n\n  /* Convert password to Unicode byte buffer + trailing 0-byte. */\n  var passBuf = new forge.util.ByteBuffer();\n  if(password !== null && password !== undefined) {\n    for(l = 0; l < password.length; l++) {\n      passBuf.putInt16(password.charCodeAt(l));\n    }\n    passBuf.putInt16(0);\n  }\n\n  /* Length of salt and password in BYTES. */\n  var p = passBuf.length();\n  var s = salt.length();\n\n  /* 1. Construct a string, D (the \"diversifier\"), by concatenating\n        v copies of ID. */\n  var D = new forge.util.ByteBuffer();\n  D.fillWithByte(id, v);\n\n  /* 2. Concatenate copies of the salt together to create a string S of length\n        v * ceil(s / v) bytes (the final copy of the salt may be trunacted\n        to create S).\n        Note that if the salt is the empty string, then so is S. */\n  var Slen = v * Math.ceil(s / v);\n  var S = new forge.util.ByteBuffer();\n  for(l = 0; l < Slen; l++) {\n    S.putByte(salt.at(l % s));\n  }\n\n  /* 3. Concatenate copies of the password together to create a string P of\n        length v * ceil(p / v) bytes (the final copy of the password may be\n        truncated to create P).\n        Note that if the password is the empty string, then so is P. */\n  var Plen = v * Math.ceil(p / v);\n  var P = new forge.util.ByteBuffer();\n  for(l = 0; l < Plen; l++) {\n    P.putByte(passBuf.at(l % p));\n  }\n\n  /* 4. Set I=S||P to be the concatenation of S and P. */\n  var I = S;\n  I.putBuffer(P);\n\n  /* 5. Set c=ceil(n / u). */\n  var c = Math.ceil(n / u);\n\n  /* 6. For i=1, 2, ..., c, do the following: */\n  for(var i = 1; i <= c; i++) {\n    /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */\n    var buf = new forge.util.ByteBuffer();\n    buf.putBytes(D.bytes());\n    buf.putBytes(I.bytes());\n    for(var round = 0; round < iter; round++) {\n      md.start();\n      md.update(buf.getBytes());\n      buf = md.digest();\n    }\n\n    /* b) Concatenate copies of Ai to create a string B of length v bytes (the\n          final copy of Ai may be truncated to create B). */\n    var B = new forge.util.ByteBuffer();\n    for(l = 0; l < v; l++) {\n      B.putByte(buf.at(l % u));\n    }\n\n    /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,\n          where k=ceil(s / v) + ceil(p / v), modify I by setting\n          Ij=(Ij+B+1) mod 2v for each j.  */\n    var k = Math.ceil(s / v) + Math.ceil(p / v);\n    var Inew = new forge.util.ByteBuffer();\n    for(j = 0; j < k; j++) {\n      var chunk = new forge.util.ByteBuffer(I.getBytes(v));\n      var x = 0x1ff;\n      for(l = B.length() - 1; l >= 0; l--) {\n        x = x >> 8;\n        x += B.at(l) + chunk.at(l);\n        chunk.setAt(l, x & 0xff);\n      }\n      Inew.putBuffer(chunk);\n    }\n    I = Inew;\n\n    /* Add Ai to A. */\n    result.putBuffer(buf);\n  }\n\n  result.truncate(result.length() - n);\n  return result;\n};\n\n/**\n * Get new Forge cipher object instance.\n *\n * @param oid the OID (in string notation).\n * @param params the ASN.1 params object.\n * @param password the password to decrypt with.\n *\n * @return new cipher object instance.\n */\npki.pbe.getCipher = function(oid, params, password) {\n  switch(oid) {\n  case pki.oids['pkcs5PBES2']:\n    return pki.pbe.getCipherForPBES2(oid, params, password);\n\n  case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\n  case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\n    return pki.pbe.getCipherForPKCS12PBE(oid, params, password);\n\n  default:\n    var error = new Error('Cannot read encrypted PBE data block. Unsupported OID.');\n    error.oid = oid;\n    error.supportedOids = [\n      'pkcs5PBES2',\n      'pbeWithSHAAnd3-KeyTripleDES-CBC',\n      'pbewithSHAAnd40BitRC2-CBC'\n    ];\n    throw error;\n  }\n};\n\n/**\n * Get new Forge cipher object instance according to PBES2 params block.\n *\n * The returned cipher instance is already started using the IV\n * from PBES2 parameter block.\n *\n * @param oid the PKCS#5 PBKDF2 OID (in string notation).\n * @param params the ASN.1 PBES2-params object.\n * @param password the password to decrypt with.\n *\n * @return new cipher object instance.\n */\npki.pbe.getCipherForPBES2 = function(oid, params, password) {\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {\n    var error = new Error('Cannot read password-based-encryption algorithm ' +\n      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // check oids\n  oid = asn1.derToOid(capture.kdfOid);\n  if(oid !== pki.oids['pkcs5PBKDF2']) {\n    var error = new Error('Cannot read encrypted private key. ' +\n      'Unsupported key derivation function OID.');\n    error.oid = oid;\n    error.supportedOids = ['pkcs5PBKDF2'];\n    throw error;\n  }\n  oid = asn1.derToOid(capture.encOid);\n  if(oid !== pki.oids['aes128-CBC'] &&\n    oid !== pki.oids['aes192-CBC'] &&\n    oid !== pki.oids['aes256-CBC'] &&\n    oid !== pki.oids['des-EDE3-CBC'] &&\n    oid !== pki.oids['desCBC']) {\n    var error = new Error('Cannot read encrypted private key. ' +\n      'Unsupported encryption scheme OID.');\n    error.oid = oid;\n    error.supportedOids = [\n      'aes128-CBC', 'aes192-CBC', 'aes256-CBC', 'des-EDE3-CBC', 'desCBC'];\n    throw error;\n  }\n\n  // set PBE params\n  var salt = capture.kdfSalt;\n  var count = forge.util.createBuffer(capture.kdfIterationCount);\n  count = count.getInt(count.length() << 3);\n  var dkLen;\n  var cipherFn;\n  switch(pki.oids[oid]) {\n  case 'aes128-CBC':\n    dkLen = 16;\n    cipherFn = forge.aes.createDecryptionCipher;\n    break;\n  case 'aes192-CBC':\n    dkLen = 24;\n    cipherFn = forge.aes.createDecryptionCipher;\n    break;\n  case 'aes256-CBC':\n    dkLen = 32;\n    cipherFn = forge.aes.createDecryptionCipher;\n    break;\n  case 'des-EDE3-CBC':\n    dkLen = 24;\n    cipherFn = forge.des.createDecryptionCipher;\n    break;\n  case 'desCBC':\n    dkLen = 8;\n    cipherFn = forge.des.createDecryptionCipher;\n    break;\n  }\n\n  // get PRF message digest\n  var md = prfOidToMessageDigest(capture.prfOid);\n\n  // decrypt private key using pbe with chosen PRF and AES/DES\n  var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n  var iv = capture.encIv;\n  var cipher = cipherFn(dk);\n  cipher.start(iv);\n\n  return cipher;\n};\n\n/**\n * Get new Forge cipher object instance for PKCS#12 PBE.\n *\n * The returned cipher instance is already started using the key & IV\n * derived from the provided password and PKCS#12 PBE salt.\n *\n * @param oid The PKCS#12 PBE OID (in string notation).\n * @param params The ASN.1 PKCS#12 PBE-params object.\n * @param password The password to decrypt with.\n *\n * @return the new cipher object instance.\n */\npki.pbe.getCipherForPKCS12PBE = function(oid, params, password) {\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {\n    var error = new Error('Cannot read password-based-encryption algorithm ' +\n      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  var salt = forge.util.createBuffer(capture.salt);\n  var count = forge.util.createBuffer(capture.iterations);\n  count = count.getInt(count.length() << 3);\n\n  var dkLen, dIvLen, cipherFn;\n  switch(oid) {\n    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\n      dkLen = 24;\n      dIvLen = 8;\n      cipherFn = forge.des.startDecrypting;\n      break;\n\n    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\n      dkLen = 5;\n      dIvLen = 8;\n      cipherFn = function(key, iv) {\n        var cipher = forge.rc2.createDecryptionCipher(key, 40);\n        cipher.start(iv, null);\n        return cipher;\n      };\n      break;\n\n    default:\n      var error = new Error('Cannot read PKCS #12 PBE data block. Unsupported OID.');\n      error.oid = oid;\n      throw error;\n  }\n\n  // get PRF message digest\n  var md = prfOidToMessageDigest(capture.prfOid);\n  var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);\n  md.start();\n  var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);\n\n  return cipherFn(key, iv);\n};\n\n/**\n * OpenSSL's legacy key derivation function.\n *\n * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html\n *\n * @param password the password to derive the key from.\n * @param salt the salt to use, null for none.\n * @param dkLen the number of bytes needed for the derived key.\n * @param [options] the options to use:\n *          [md] an optional message digest object to use.\n */\npki.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {\n  if(typeof md === 'undefined' || md === null) {\n    if(!('md5' in forge.md)) {\n      throw new Error('\"md5\" hash algorithm unavailable.');\n    }\n    md = forge.md.md5.create();\n  }\n  if(salt === null) {\n    salt = '';\n  }\n  var digests = [hash(md, password + salt)];\n  for(var length = 16, i = 1; length < dkLen; ++i, length += 16) {\n    digests.push(hash(md, digests[i - 1] + password + salt));\n  }\n  return digests.join('').substr(0, dkLen);\n};\n\nfunction hash(md, bytes) {\n  return md.start().update(bytes).digest().getBytes();\n}\n\nfunction prfOidToMessageDigest(prfOid) {\n  // get PRF algorithm, default to SHA-1\n  var prfAlgorithm;\n  if(!prfOid) {\n    prfAlgorithm = 'hmacWithSHA1';\n  } else {\n    prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];\n    if(!prfAlgorithm) {\n      var error = new Error('Unsupported PRF OID.');\n      error.oid = prfOid;\n      error.supported = [\n        'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',\n        'hmacWithSHA512'];\n      throw error;\n    }\n  }\n  return prfAlgorithmToMessageDigest(prfAlgorithm);\n}\n\nfunction prfAlgorithmToMessageDigest(prfAlgorithm) {\n  var factory = forge.md;\n  switch(prfAlgorithm) {\n  case 'hmacWithSHA224':\n    factory = forge.md.sha512;\n  case 'hmacWithSHA1':\n  case 'hmacWithSHA256':\n  case 'hmacWithSHA384':\n  case 'hmacWithSHA512':\n    prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();\n    break;\n  default:\n    var error = new Error('Unsupported PRF algorithm.');\n    error.algorithm = prfAlgorithm;\n    error.supported = [\n      'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',\n      'hmacWithSHA512'];\n    throw error;\n  }\n  if(!factory || !(prfAlgorithm in factory)) {\n    throw new Error('Unknown hash algorithm: ' + prfAlgorithm);\n  }\n  return factory[prfAlgorithm].create();\n}\n\nfunction createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {\n  var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // salt\n    asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\n    // iteration count\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      countBytes.getBytes())\n  ]);\n  // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm\n  if(prfAlgorithm !== 'hmacWithSHA1') {\n    params.value.push(\n      // key length\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n        forge.util.hexToBytes(dkLen.toString(16))),\n      // AlgorithmIdentifier\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // algorithm\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()),\n        // parameters (null)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n      ]));\n  }\n  return params;\n}\n"],
  "mappings": "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AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC1F;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC1F;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC1F;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC1F;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC1F;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC1F;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC1F;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAA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",
  "names": ["options", "key", "iv"]
}
